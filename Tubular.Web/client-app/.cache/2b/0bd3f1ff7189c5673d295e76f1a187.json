{"id":"../node_modules/tubular-react/dist/Storage/LocalStorage.js","dependencies":[{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Storage\\LocalStorage.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\src\\Storage\\LocalStorage.tsx","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\package.json","includedInParent":true,"mtime":1567469419529},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\package.json","includedInParent":true,"mtime":1567480634804}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar LocalStorage = /** @class */ (function () {\r\n    function LocalStorage(name) {\r\n        this.name = name;\r\n        if (!window || !window.localStorage) {\r\n            throw new Error('The localStorage is not present.');\r\n        }\r\n    }\r\n    LocalStorage.prototype.setGridName = function (name) {\r\n        this.name = name;\r\n    };\r\n    LocalStorage.prototype.setTextSearch = function (textSearch) {\r\n        window.localStorage.setItem(this.name + \"_textSearch\", textSearch);\r\n    };\r\n    LocalStorage.prototype.setPage = function (page) {\r\n        window.localStorage.setItem(this.name + \"_page\", page.toString());\r\n    };\r\n    LocalStorage.prototype.setColumns = function (columns) {\r\n        window.localStorage.setItem(this.name + \"_columns\", JSON.stringify(columns));\r\n    };\r\n    LocalStorage.prototype.getTextSearch = function () {\r\n        return window.localStorage.getItem(this.name + \"_textSearch\");\r\n    };\r\n    LocalStorage.prototype.getPage = function () {\r\n        return parseInt(window.localStorage.getItem(this.name + \"_page\"), 10);\r\n    };\r\n    LocalStorage.prototype.getColumns = function () {\r\n        return JSON.parse(window.localStorage.getItem(this.name + \"_columns\"));\r\n    };\r\n    return LocalStorage;\r\n}());\r\nexports.LocalStorage = LocalStorage;\r\n"},"sourceMaps":{"js":{"version":3,"file":"LocalStorage.js","sourceRoot":"","sources":["../../src/Storage/LocalStorage.tsx"],"names":[],"mappings":";;AAGA;IAEI,sBAA2B,IAAa;QAAb,SAAI,GAAJ,IAAI,CAAS;QAEpC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACvD;IACL,CAAC;IAEM,kCAAW,GAAlB,UAAmB,IAAY;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAEM,oCAAa,GAApB,UAAqB,UAAkB;QACnC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAI,IAAI,CAAC,IAAI,gBAAa,EAAE,UAAU,CAAC,CAAC;IACvE,CAAC;IAEM,8BAAO,GAAd,UAAe,IAAY;QACvB,MAAM,CAAC,YAAY,CAAC,OAAO,CAAI,IAAI,CAAC,IAAI,UAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACtE,CAAC;IAEM,iCAAU,GAAjB,UAAkB,OAAsB;QACpC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAI,IAAI,CAAC,IAAI,aAAU,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACjF,CAAC;IAEM,oCAAa,GAApB;QACI,OAAO,MAAM,CAAC,YAAY,CAAC,OAAO,CAAI,IAAI,CAAC,IAAI,gBAAa,CAAC,CAAC;IAClE,CAAC;IAEM,8BAAO,GAAd;QACI,OAAO,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAI,IAAI,CAAC,IAAI,UAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1E,CAAC;IAEM,iCAAU,GAAjB;QACI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAI,IAAI,CAAC,IAAI,aAAU,CAAC,CAAC,CAAC;IAC3E,CAAC;IACL,mBAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,oCAAY","sourcesContent":["import { ColumnModel } from 'tubular-common';\r\nimport { IDataGridStorage } from '../DataGridInterfaces';\r\n\r\nexport class LocalStorage implements IDataGridStorage {\r\n\r\n    public constructor(private name?: string) {\r\n\r\n        if (!window || !window.localStorage) {\r\n            throw new Error('The localStorage is not present.');\r\n        }\r\n    }\r\n\r\n    public setGridName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public setTextSearch(textSearch: string): void {\r\n        window.localStorage.setItem(`${this.name}_textSearch`, textSearch);\r\n    }\r\n\r\n    public setPage(page: number): void {\r\n        window.localStorage.setItem(`${this.name}_page`, page.toString());\r\n    }\r\n\r\n    public setColumns(columns: ColumnModel[]): void {\r\n        window.localStorage.setItem(`${this.name}_columns`, JSON.stringify(columns));\r\n    }\r\n\r\n    public getTextSearch(): string {\r\n        return window.localStorage.getItem(`${this.name}_textSearch`);\r\n    }\r\n\r\n    public getPage(): number {\r\n        return parseInt(window.localStorage.getItem(`${this.name}_page`), 10);\r\n    }\r\n\r\n    public getColumns(): ColumnModel[] {\r\n        return JSON.parse(window.localStorage.getItem(`${this.name}_columns`));\r\n    }\r\n}\r\n"]}},"error":null,"hash":"373986e52cad29592b3545b816cd06ce","cacheData":{"env":{}}}
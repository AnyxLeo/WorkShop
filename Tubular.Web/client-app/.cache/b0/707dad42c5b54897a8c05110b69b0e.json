{"id":"../node_modules/tubular-react/dist/utils/TubularHttpClient.js","dependencies":[{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\utils\\TubularHttpClient.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\src\\utils\\TubularHttpClient.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\package.json","includedInParent":true,"mtime":1567469419529},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\package.json","includedInParent":true,"mtime":1567480634804}],"generated":{"js":"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar expectedStructureKeys = JSON.stringify([\r\n    'AggregationPayload',\r\n    'Counter',\r\n    'CurrentPage',\r\n    'FilteredRecordCount',\r\n    'Payload',\r\n    'TotalPages',\r\n    'TotalRecordCount'\r\n]);\r\nvar TubularHttpClient = /** @class */ (function () {\r\n    function TubularHttpClient(request) {\r\n        this.request = TubularHttpClient.resolveRequest(request);\r\n    }\r\n    TubularHttpClient.resolveRequest = function (request) {\r\n        var httpCast = request;\r\n        if (httpCast.request) {\r\n            return httpCast.request;\r\n        }\r\n        return request || request;\r\n    };\r\n    TubularHttpClient.getRequest = function (objRequest, gridRequest) {\r\n        if (typeof objRequest === 'string') {\r\n            return new Request(objRequest, {\r\n                body: JSON.stringify(gridRequest),\r\n                headers: new Headers({ 'Content-Type': 'application/json;charset=utf-8' }),\r\n                method: 'POST',\r\n            });\r\n        }\r\n        objRequest.headers.append('Content-Type', 'application/json;charset=utf-8');\r\n        return new Request(objRequest.url, {\r\n            body: JSON.stringify(gridRequest),\r\n            headers: objRequest.headers,\r\n            method: objRequest.method,\r\n        });\r\n    };\r\n    TubularHttpClient.isValidResponse = function (data) {\r\n        return data && expectedStructureKeys === JSON.stringify(Object.keys(data).sort());\r\n    };\r\n    TubularHttpClient.parsePayload = function (row, c) {\r\n        return c.reduce(function (obj, column, key) {\r\n            obj[column.Name] = row[key] || row[column.Name];\r\n            return obj;\r\n        }, {});\r\n    };\r\n    TubularHttpClient.prototype.fetch = function (gridRequest) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, responseBody;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, fetch(TubularHttpClient.getRequest(this.request, gridRequest))];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!(response.status >= 200 && response.status < 300)) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, response.text()];\r\n                    case 2:\r\n                        responseBody = _a.sent();\r\n                        return [2 /*return*/, responseBody ? JSON.parse(responseBody) : {}];\r\n                    case 3: throw new Error('Invalid request');\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return TubularHttpClient;\r\n}());\r\nexports.default = TubularHttpClient;\r\n"},"sourceMaps":{"js":{"version":3,"file":"TubularHttpClient.js","sourceRoot":"","sources":["../../src/utils/TubularHttpClient.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAM,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC;IACzC,oBAAoB;IACpB,SAAS;IACT,aAAa;IACb,qBAAqB;IACrB,SAAS;IACT,YAAY;IACZ,kBAAkB;CAAC,CAAC,CAAC;AAEzB;IA6CI,2BAAmB,OAA8C;QAC7D,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAC7D,CAAC;IA9Ca,gCAAc,GAA5B,UAA6B,OAA8C;QACvE,IAAM,QAAQ,GAAG,OAA6B,CAAC;QAE/C,IAAI,QAAQ,CAAC,OAAO,EAAE;YAClB,OAAO,QAAQ,CAAC,OAAO,CAAC;SAC3B;QAED,OAAO,OAAkB,IAAI,OAAiB,CAAC;IACnD,CAAC;IAEa,4BAAU,GAAxB,UAAyB,UAA4B,EAAE,WAAwB;QAC3E,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAChC,OAAO,IAAI,OAAO,CAAC,UAAU,EACzB;gBACI,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;gBACjC,OAAO,EAAE,IAAI,OAAO,CAAC,EAAE,cAAc,EAAE,gCAAgC,EAAE,CAAC;gBAC1E,MAAM,EAAE,MAAM;aACjB,CAAC,CAAC;SACV;QAEA,UAAsB,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,gCAAgC,CAAC,CAAC;QAEzF,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,EAC7B;YACI,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;YACjC,OAAO,EAAG,UAAsB,CAAC,OAAO;YACxC,MAAM,EAAG,UAAsB,CAAC,MAAM;SACzC,CAAC,CAAC;IACX,CAAC;IAEa,iCAAe,GAA7B,UAA8B,IAAS;QACnC,OAAO,IAAI,IAAI,qBAAqB,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IACtF,CAAC;IAEa,8BAAY,GAA1B,UAA2B,GAAQ,EAAE,CAAQ;QACzC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAC,GAAQ,EAAE,MAAW,EAAE,GAAQ;YAC5C,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAEhD,OAAO,GAAG,CAAC;QACf,CAAC,EAAE,EAAE,CAAC,CAAC;IACX,CAAC;IAQY,iCAAK,GAAlB,UAAmB,WAAwB;;;;;4BACtB,qBAAM,KAAK,CAAC,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,EAAA;;wBAA/E,QAAQ,GAAG,SAAoE;6BAEjF,CAAA,QAAQ,CAAC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAA,EAA/C,wBAA+C;wBAClB,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;wBAA5C,YAAY,GAAW,SAAqB;wBAElD,sBAAO,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,EAAC;4BAGxD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;;;;KACtC;IACL,wBAAC;AAAD,CAAC,AA5DD,IA4DC","sourcesContent":["import { GridRequest } from 'tubular-common';\r\nimport ITubularHttpClient from './ITubularHttpClient';\r\n\r\nconst expectedStructureKeys = JSON.stringify([\r\n    'AggregationPayload',\r\n    'Counter',\r\n    'CurrentPage',\r\n    'FilteredRecordCount',\r\n    'Payload',\r\n    'TotalPages',\r\n    'TotalRecordCount']);\r\n\r\nexport default class TubularHttpClient implements ITubularHttpClient {\r\n    public static resolveRequest(request: string | Request | ITubularHttpClient): string | Request {\r\n        const httpCast = request as ITubularHttpClient;\r\n\r\n        if (httpCast.request) {\r\n            return httpCast.request;\r\n        }\r\n\r\n        return request as Request || request as string;\r\n    }\r\n\r\n    public static getRequest(objRequest: string | Request, gridRequest: GridRequest) {\r\n        if (typeof objRequest === 'string') {\r\n            return new Request(objRequest,\r\n                {\r\n                    body: JSON.stringify(gridRequest),\r\n                    headers: new Headers({ 'Content-Type': 'application/json;charset=utf-8' }),\r\n                    method: 'POST',\r\n                });\r\n        }\r\n\r\n        (objRequest as Request).headers.append('Content-Type', 'application/json;charset=utf-8');\r\n\r\n        return new Request(objRequest.url,\r\n            {\r\n                body: JSON.stringify(gridRequest),\r\n                headers: (objRequest as Request).headers,\r\n                method: (objRequest as Request).method,\r\n            });\r\n    }\r\n\r\n    public static isValidResponse(data: any) {\r\n        return data && expectedStructureKeys === JSON.stringify(Object.keys(data).sort());\r\n    }\r\n\r\n    public static parsePayload(row: any, c: any[]) {\r\n        return c.reduce((obj: any, column: any, key: any) => {\r\n            obj[column.Name] = row[key] || row[column.Name];\r\n\r\n            return obj;\r\n        }, {});\r\n    }\r\n\r\n    public request: string | Request;\r\n\r\n    public constructor(request: string | Request | ITubularHttpClient) {\r\n        this.request = TubularHttpClient.resolveRequest(request);\r\n    }\r\n\r\n    public async fetch(gridRequest: GridRequest): Promise<any> {\r\n        const response = await fetch(TubularHttpClient.getRequest(this.request, gridRequest));\r\n\r\n        if (response.status >= 200 && response.status < 300) {\r\n            const responseBody: string = await response.text();\r\n\r\n            return responseBody ? JSON.parse(responseBody) : {};\r\n        }\r\n\r\n        throw new Error('Invalid request');\r\n    }\r\n}\r\n"]}},"error":null,"hash":"50bf50c2d36197136d49a1249ea37be1","cacheData":{"env":{}}}
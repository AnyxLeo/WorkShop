{"id":"../node_modules/tubular-react/dist/utils/ShallowHttpClient.js","dependencies":[{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\utils\\ShallowHttpClient.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\src\\utils\\ShallowHttpClient.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\package.json","includedInParent":true,"mtime":1567469419529},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\package.json","includedInParent":true,"mtime":1567480634804}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ShallowHttpClient = /** @class */ (function () {\r\n    function ShallowHttpClient(url, handler) {\r\n        this.request = url;\r\n        this.handler = handler;\r\n    }\r\n    ShallowHttpClient.prototype.fetch = function (gridRequest) {\r\n        return this.handler(this.request, gridRequest);\r\n    };\r\n    return ShallowHttpClient;\r\n}());\r\nexports.default = ShallowHttpClient;\r\n"},"sourceMaps":{"js":{"version":3,"file":"ShallowHttpClient.js","sourceRoot":"","sources":["../../src/utils/ShallowHttpClient.ts"],"names":[],"mappings":";;AAKA;IAII,2BAAmB,GAAW,EAAE,OAAqB;QACjD,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAEM,iCAAK,GAAZ,UAAa,WAAwB;QACjC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IACnD,CAAC;IACL,wBAAC;AAAD,CAAC,AAZD,IAYC","sourcesContent":["import { GridRequest } from 'tubular-common';\r\nimport ITubularHttpClient from './ITubularHttpClient';\r\n\r\nexport type FetchHandler = (request: string, gridRequest: GridRequest) => Promise<any>;\r\n\r\nexport default class ShallowHttpClient implements ITubularHttpClient {\r\n    public request: string;\r\n    public handler: FetchHandler;\r\n\r\n    public constructor(url: string, handler: FetchHandler) {\r\n        this.request = url;\r\n        this.handler = handler;\r\n    }\r\n\r\n    public fetch(gridRequest: GridRequest): Promise<any> {\r\n        return this.handler(this.request, gridRequest);\r\n    }\r\n}\r\n"]}},"error":null,"hash":"91ec2f3529f0d943d652f38c43d10696","cacheData":{"env":{}}}
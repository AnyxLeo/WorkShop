{"id":"../node_modules/tubular-common/dist/Models/GridRequest.js","dependencies":[{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-common\\dist\\Models\\GridRequest.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-common\\src\\Models\\GridRequest.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\package.json","includedInParent":true,"mtime":1567469419529},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-common\\package.json","includedInParent":true,"mtime":1567480635442}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar currentTimezone = new Date().getTimezoneOffset();\r\nvar GridRequest = /** @class */ (function () {\r\n    function GridRequest(columns, itemsPerPage, page, searchText) {\r\n        if (searchText === void 0) { searchText = ''; }\r\n        this.Columns = columns;\r\n        this.Search = { Operator: 'Auto', Text: searchText };\r\n        this.Skip = itemsPerPage === -1 ? 0 : page * itemsPerPage;\r\n        this.Take = itemsPerPage;\r\n        this.Counter = GridRequest.counter++;\r\n        this.TimezoneOffset = currentTimezone;\r\n    }\r\n    GridRequest.counter = 0;\r\n    return GridRequest;\r\n}());\r\nexports.default = GridRequest;\r\n"},"sourceMaps":{"js":{"version":3,"file":"GridRequest.js","sourceRoot":"","sources":["../../src/Models/GridRequest.ts"],"names":[],"mappings":";;AAEA,IAAM,eAAe,GAAG,IAAI,IAAI,EAAE,CAAC,iBAAiB,EAAE,CAAC;AAOvD;IAUE,qBAAY,OAAsB,EAAE,YAAoB,EAAE,IAAY,EAAE,UAAuB;QAAvB,2BAAA,EAAA,eAAuB;QAC7F,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;QACrD,IAAI,CAAC,IAAI,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,YAAY,CAAC;QAC1D,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,EAAE,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;IACxC,CAAC;IAhBgB,mBAAO,GAAW,CAAC,CAAC;IAiBvC,kBAAC;CAAA,AAlBD,IAkBC;kBAlBoB,WAAW","sourcesContent":["import ColumnModel from './ColumnModel';\r\n\r\nconst currentTimezone = new Date().getTimezoneOffset();\r\n\r\nexport interface ISearch {\r\n  Operator: any;\r\n  Text: any;\r\n}\r\n\r\nexport default class GridRequest {\r\n  protected static counter: number = 0;\r\n\r\n  public Columns: ColumnModel[];\r\n  public Counter: number;\r\n  public Search: ISearch;\r\n  public Skip: number;\r\n  public Take: number;\r\n  public TimezoneOffset: number;\r\n\r\n  constructor(columns: ColumnModel[], itemsPerPage: number, page: number, searchText: string = '') {\r\n    this.Columns = columns;\r\n    this.Search = { Operator: 'Auto', Text: searchText };\r\n    this.Skip = itemsPerPage === -1 ? 0 : page * itemsPerPage;\r\n    this.Take = itemsPerPage;\r\n    this.Counter = GridRequest.counter++;\r\n    this.TimezoneOffset = currentTimezone;\r\n  }\r\n}\r\n"]}},"error":null,"hash":"3909360a139f8827b97029caa96e4f94","cacheData":{"env":{}}}
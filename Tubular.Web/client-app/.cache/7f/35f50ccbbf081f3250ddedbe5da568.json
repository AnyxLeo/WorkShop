{"id":"../node_modules/tubular-react/dist/DataGrid/GridBody.js","dependencies":[{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\DataGrid\\GridBody.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\src\\DataGrid\\GridBody.tsx","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\package.json","includedInParent":true,"mtime":1567469419529},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\package.json","includedInParent":true,"mtime":1567480634804},{"name":"@material-ui/core/TableBody","loc":{"line":3,"column":26},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\DataGrid\\GridBody.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\@material-ui\\core\\esm\\TableBody\\index.js"},{"name":"@material-ui/core/TableCell","loc":{"line":4,"column":26},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\DataGrid\\GridBody.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\@material-ui\\core\\esm\\TableCell\\index.js"},{"name":"@material-ui/core/TableRow","loc":{"line":5,"column":25},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\DataGrid\\GridBody.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\@material-ui\\core\\esm\\TableRow\\index.js"},{"name":"@material-ui/core/Typography","loc":{"line":6,"column":27},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\DataGrid\\GridBody.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\@material-ui\\core\\esm\\Typography\\index.js"},{"name":"@material-ui/icons/Warning","loc":{"line":7,"column":24},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\DataGrid\\GridBody.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\@material-ui\\icons\\Warning.js"},{"name":"react","loc":{"line":8,"column":20},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\DataGrid\\GridBody.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\react\\index.js"},{"name":"../utils","loc":{"line":9,"column":22},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\DataGrid\\GridBody.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\utils\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar TableBody_1 = require(\"@material-ui/core/TableBody\");\r\nvar TableCell_1 = require(\"@material-ui/core/TableCell\");\r\nvar TableRow_1 = require(\"@material-ui/core/TableRow\");\r\nvar Typography_1 = require(\"@material-ui/core/Typography\");\r\nvar Warning_1 = require(\"@material-ui/icons/Warning\");\r\nvar React = require(\"react\");\r\nvar utils_1 = require(\"../utils\");\r\nvar getStyles = function (isPointer) { return ({\r\n    row: { cursor: isPointer ? 'pointer' : 'auto' },\r\n    title: { paddingLeft: '15px' },\r\n}); };\r\nexports.GridBody = function (_a) {\r\n    var grid = _a.grid, bodyRenderer = _a.bodyRenderer, onRowClick = _a.onRowClick;\r\n    var onRowClickProxy = function (row) { return function (ev) {\r\n        if (onRowClick) {\r\n            onRowClick(row);\r\n        }\r\n    }; };\r\n    var styles = getStyles(Boolean(onRowClick));\r\n    if (!bodyRenderer) {\r\n        bodyRenderer = function (row, rowIndex, columns) { return (React.createElement(TableRow_1.default, { hover: true, key: rowIndex, onClick: onRowClickProxy(row), style: styles.row }, utils_1.renderCells(columns, row))); };\r\n    }\r\n    var noDataRow = (React.createElement(TableRow_1.default, null,\r\n        React.createElement(TableCell_1.default, { colSpan: grid.state.columns.filter(function (col) { return col.Visible; }).length },\r\n            React.createElement(Typography_1.default, { style: styles.title, variant: 'body2', gutterBottom: true },\r\n                React.createElement(Warning_1.default, null),\r\n                \" No records found\"))));\r\n    return (React.createElement(TableBody_1.default, null, grid.state.filteredRecordCount === 0 && !grid.state.isLoading\r\n        ? noDataRow\r\n        : grid.state.data\r\n            .map(function (row, rowIndex) {\r\n            return bodyRenderer(row, rowIndex, grid.state.columns, onRowClickProxy(row));\r\n        })));\r\n};\r\n"},"sourceMaps":{"js":{"version":3,"file":"GridBody.js","sourceRoot":"","sources":["../../src/DataGrid/GridBody.tsx"],"names":[],"mappings":";;AAAA,yDAAoD;AACpD,yDAAoD;AACpD,uDAAkD;AAClD,2DAAsD;AACtD,sDAAiD;AACjD,6BAA+B;AAG/B,kCAAuC;AAavC,IAAM,SAAS,GAAG,UAAC,SAAkB,IAAK,OAAA,CAAC;IACvC,GAAG,EAAE,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,EAAE;IAC/C,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE;CACjC,CAAC,EAHwC,CAGxC,CAAC;AAEU,QAAA,QAAQ,GAAoC,UAAC,EAAkC;QAAhC,cAAI,EAAE,8BAAY,EAAE,0BAAU;IACtF,IAAM,eAAe,GAAG,UAAC,GAAQ,IAAK,OAAA,UAAC,EAAqD;QAExF,IAAI,UAAU,EAAE;YACZ,UAAU,CAAC,GAAG,CAAC,CAAC;SACnB;IACL,CAAC,EALqC,CAKrC,CAAC;IAEF,IAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;IAE9C,IAAI,CAAC,YAAY,EAAE;QACf,YAAY,GAAG,UAAC,GAAG,EAAE,QAAQ,EAAE,OAAO,IAAK,OAAA,CACvC,oBAAC,kBAAQ,IACL,KAAK,EAAE,IAAI,EACX,GAAG,EAAE,QAAQ,EACb,OAAO,EAAE,eAAe,CAAC,GAAG,CAAC,EAC7B,KAAK,EAAE,MAAM,CAAC,GAAG,IAEhB,mBAAW,CAAC,OAAO,EAAE,GAAG,CAAC,CACnB,CACd,EAT0C,CAS1C,CAAC;KACL;IAED,IAAM,SAAS,GAAG,CACd,oBAAC,kBAAQ;QACL,oBAAC,mBAAS,IACN,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,GAAQ,IAAK,OAAA,GAAG,CAAC,OAAO,EAAX,CAAW,CAAC,CAAC,MAAM;YAEpE,oBAAC,oBAAU,IACP,KAAK,EAAE,MAAM,CAAC,KAAK,EACnB,OAAO,EAAC,OAAO,EACf,YAAY,EAAE,IAAI;gBAElB,oBAAC,iBAAO,OAAG;oCACF,CACL,CACL,CACd,CAAC;IAEF,OAAO,CACH,oBAAC,mBAAS,QACL,IAAI,CAAC,KAAK,CAAC,mBAAmB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS;QAC1D,CAAC,CAAC,SAAS;QACX,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI;aACZ,GAAG,CAAC,UAAC,GAAQ,EAAE,QAAgB;YAC5B,OAAA,YAAY,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,eAAe,CAAC,GAAG,CAAC,CAAC;QAArE,CAAqE,CAAC,CAE1E,CACf,CAAC;AACN,CAAC,CAAC","sourcesContent":["import TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Warning from '@material-ui/icons/Warning';\r\nimport * as React from 'react';\r\nimport { ColumnModel } from 'tubular-common';\r\nimport { IDataGrid } from '../DataGridInterfaces/IDataGrid';\r\nimport { renderCells } from '../utils';\r\n\r\ninterface IProps {\r\n    grid: IDataGrid;\r\n    bodyRenderer?(\r\n        row: any,\r\n        index: number,\r\n        columns: ColumnModel[],\r\n        onRowClickProxy: (row: any) => void,\r\n    ): React.ReactNode;\r\n    onRowClick?(row: any): void;\r\n}\r\n\r\nconst getStyles = (isPointer: boolean) => ({\r\n    row: { cursor: isPointer ? 'pointer' : 'auto' },\r\n    title: { paddingLeft: '15px' },\r\n});\r\n\r\nexport const GridBody: React.FunctionComponent<IProps> = ({ grid, bodyRenderer, onRowClick }) => {\r\n    const onRowClickProxy = (row: any) => (ev: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => {\r\n\r\n        if (onRowClick) {\r\n            onRowClick(row);\r\n        }\r\n    };\r\n\r\n    const styles = getStyles(Boolean(onRowClick));\r\n\r\n    if (!bodyRenderer) {\r\n        bodyRenderer = (row, rowIndex, columns) => (\r\n            <TableRow\r\n                hover={true}\r\n                key={rowIndex}\r\n                onClick={onRowClickProxy(row)}\r\n                style={styles.row}\r\n            >\r\n                {renderCells(columns, row)}\r\n            </TableRow>\r\n        );\r\n    }\r\n\r\n    const noDataRow = (\r\n        <TableRow>\r\n            <TableCell\r\n                colSpan={grid.state.columns.filter((col: any) => col.Visible).length}\r\n            >\r\n                <Typography\r\n                    style={styles.title}\r\n                    variant='body2'\r\n                    gutterBottom={true}\r\n                >\r\n                    <Warning /> No records found\r\n                </Typography>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n\r\n    return (\r\n        <TableBody>\r\n            {grid.state.filteredRecordCount === 0 && !grid.state.isLoading\r\n                ? noDataRow\r\n                : grid.state.data\r\n                    .map((row: any, rowIndex: number) =>\r\n                        bodyRenderer(row, rowIndex, grid.state.columns, onRowClickProxy(row)))\r\n            }\r\n        </TableBody>\r\n    );\r\n};\r\n"]}},"error":null,"hash":"7dfac0687386aed06fcfd781ec783d34","cacheData":{"env":{}}}
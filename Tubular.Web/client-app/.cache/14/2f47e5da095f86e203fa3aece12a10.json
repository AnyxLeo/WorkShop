{"id":"../node_modules/tubular-react/dist/Hooks/useDataGrid.js","dependencies":[{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Hooks\\useDataGrid.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\src\\Hooks\\useDataGrid.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\package.json","includedInParent":true,"mtime":1567469419529},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\package.json","includedInParent":true,"mtime":1567480634804},{"name":"react","loc":{"line":57,"column":20},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Hooks\\useDataGrid.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\react\\index.js"},{"name":"tubular-common","loc":{"line":58,"column":31},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Hooks\\useDataGrid.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-common\\dist\\index.js"},{"name":"../Storage","loc":{"line":59,"column":24},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Hooks\\useDataGrid.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Storage\\index.js"},{"name":"../Storage/NullStorage","loc":{"line":60,"column":28},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Hooks\\useDataGrid.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Storage\\NullStorage.js"},{"name":"../utils/TubularHttpClient","loc":{"line":61,"column":34},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Hooks\\useDataGrid.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\utils\\TubularHttpClient.js"}],"generated":{"js":"\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = require(\"react\");\r\nvar tubular_common_1 = require(\"tubular-common\");\r\nvar Storage_1 = require(\"../Storage\");\r\nvar NullStorage_1 = require(\"../Storage/NullStorage\");\r\nvar TubularHttpClient_1 = require(\"../utils/TubularHttpClient\");\r\nvar getRemoteDataSource = function (request) {\r\n    return function (gridRequest) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var httpCast, httpClient, data;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    httpCast = request;\r\n                    if (httpCast.request) {\r\n                        httpClient = httpCast;\r\n                    }\r\n                    else {\r\n                        httpClient = new TubularHttpClient_1.default(request);\r\n                    }\r\n                    return [4 /*yield*/, httpClient.fetch(gridRequest)];\r\n                case 1:\r\n                    data = _a.sent();\r\n                    if (!TubularHttpClient_1.default.isValidResponse(data)) {\r\n                        throw new Error('Server response is a invalid Tubular object');\r\n                    }\r\n                    data.Payload = data.Payload.map(function (row) { return TubularHttpClient_1.default.parsePayload(row, gridRequest.Columns); });\r\n                    return [2 /*return*/, data];\r\n            }\r\n        });\r\n    }); };\r\n};\r\nvar getLocalDataSource = function (source) {\r\n    return function (request) {\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                resolve(tubular_common_1.default.getResponse(request, source));\r\n            }\r\n            catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    };\r\n};\r\nvar useDataGrid = function (initColumns, config, source, deps) {\r\n    var _a = React.useState(false), isLoading = _a[0], setIsLoading = _a[1];\r\n    var _b = React.useState(initColumns), getColumns = _b[0], setColumns = _b[1];\r\n    var _c = React.useState(false), initialized = _c[0], setInitialized = _c[1];\r\n    var _d = React.useState(null), getActiveColumn = _d[0], setActiveColumn = _d[1];\r\n    var _e = React.useState(false), getMultiSort = _e[0], setMultiSort = _e[1];\r\n    var _f = React.useState(config.itemsPerPage || 10), getItemsPerPage = _f[0], setItemsPerPage = _f[1];\r\n    var getStorage = React.useState(config.storage || new NullStorage_1.NullStorage())[0];\r\n    var _g = React.useState(config.page || 0), getPage = _g[0], setPage = _g[1];\r\n    var _h = React.useState(config.searchText || ''), getSearchText = _h[0], setSearchText = _h[1];\r\n    var _j = React.useState(null), getError = _j[0], setError = _j[1];\r\n    var getAllRecords = source instanceof Array ? getLocalDataSource(source) : getRemoteDataSource(source);\r\n    var _k = React.useState({\r\n        aggregate: null,\r\n        data: [],\r\n        filteredRecordCount: 0,\r\n        totalRecordCount: 0,\r\n    }), getState = _k[0], setState = _k[1];\r\n    if (getStorage instanceof Storage_1.LocalStorage) {\r\n        getStorage.setGridName(config.gridName);\r\n    }\r\n    var api = {\r\n        exportTo: function (allRows, exportFunc) { return __awaiter(void 0, void 0, void 0, function () {\r\n            var payload, Payload;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (getState.filteredRecordCount === 0) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        payload = getState.data;\r\n                        if (!allRows) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, getAllRecords(new tubular_common_1.GridRequest(getColumns, -1, 0, getSearchText))];\r\n                    case 1:\r\n                        Payload = (_a.sent()).Payload;\r\n                        payload = Payload;\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        exportFunc(payload, getColumns);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); },\r\n        goToPage: function (page) {\r\n            if (getPage !== page) {\r\n                setPage(page);\r\n            }\r\n        },\r\n        handleFilterChange: function (value) {\r\n            setActiveColumn(__assign(__assign({}, getActiveColumn), { Filter: __assign(__assign({}, getActiveColumn.Filter), value) }));\r\n        },\r\n        processRequest: function () { return __awaiter(void 0, void 0, void 0, function () {\r\n            var request, response, maxPage, err_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        setIsLoading(true);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        request = new tubular_common_1.GridRequest(getColumns, getItemsPerPage, getPage, getSearchText);\r\n                        return [4 /*yield*/, getAllRecords(request)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        maxPage = Math.ceil(response.TotalRecordCount / getItemsPerPage);\r\n                        response.CurrentPage = response.CurrentPage > maxPage ? maxPage : response.CurrentPage;\r\n                        getStorage.setPage(response.CurrentPage - 1);\r\n                        getStorage.setColumns(getColumns);\r\n                        getStorage.setTextSearch(getSearchText);\r\n                        setState({\r\n                            aggregate: response.AggregationPayload,\r\n                            data: response.Payload,\r\n                            filteredRecordCount: response.FilteredRecordCount || 0,\r\n                            totalRecordCount: response.TotalRecordCount || 0,\r\n                        });\r\n                        setIsLoading(false);\r\n                        setInitialized(true);\r\n                        setError(null);\r\n                        setPage(response.CurrentPage - 1);\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        err_1 = _a.sent();\r\n                        if (config.onError) {\r\n                            config.onError(err_1);\r\n                        }\r\n                        setIsLoading(false);\r\n                        setError(err_1);\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); },\r\n        setActiveColumn: setActiveColumn,\r\n        setFilter: function (value) {\r\n            var columns = __spreadArrays(getColumns);\r\n            var column = columns.find(function (c) { return c.Name === getActiveColumn.Name; });\r\n            if (!column) {\r\n                return;\r\n            }\r\n            column.Filter = __assign(__assign({}, getActiveColumn.Filter), value);\r\n            setColumns(__spreadArrays(columns));\r\n        },\r\n        sortColumn: function (property) {\r\n            var columns = tubular_common_1.ColumnModel.sortColumnArray(property, __spreadArrays(getColumns), getMultiSort);\r\n            setColumns(columns);\r\n        },\r\n        updateItemPerPage: function (itemsPerPage) {\r\n            if (getItemsPerPage !== itemsPerPage) {\r\n                setItemsPerPage(itemsPerPage);\r\n            }\r\n        },\r\n        updateSearchText: function (searchText) {\r\n            if (getSearchText !== searchText) {\r\n                setSearchText(searchText);\r\n            }\r\n        },\r\n    };\r\n    var dependencies = [getColumns, getPage, getSearchText, getItemsPerPage, source];\r\n    if (deps) {\r\n        dependencies = dependencies.concat(deps);\r\n    }\r\n    React.useEffect(function () {\r\n        api.processRequest();\r\n    }, dependencies);\r\n    var initGrid = function () {\r\n        if (getStorage.getPage()) {\r\n            setPage(getStorage.getPage());\r\n        }\r\n        var storedColumns = getStorage.getColumns();\r\n        if (storedColumns) {\r\n            var columns_1 = __spreadArrays(getColumns);\r\n            storedColumns.forEach(function (column) {\r\n                var currentColumn = columns_1.find(function (col) { return col.Name === column.Name; });\r\n                if (!currentColumn) {\r\n                    return;\r\n                }\r\n                currentColumn.Visible = column.Visible;\r\n                if (currentColumn.Filter !== null && currentColumn.Filter.Text !== null) {\r\n                    return;\r\n                }\r\n                if (column.Filter != null &&\r\n                    column.Filter.Text != null &&\r\n                    column.Filter.Operator !== tubular_common_1.CompareOperators.NONE) {\r\n                    currentColumn.Filter = column.Filter;\r\n                }\r\n            });\r\n            setColumns(columns_1);\r\n        }\r\n        setInitialized(true);\r\n    };\r\n    if (!initialized) {\r\n        initGrid();\r\n    }\r\n    var state = __assign(__assign({}, getState), { activeColumn: getActiveColumn, columns: getColumns, error: getError, initialized: initialized,\r\n        isLoading: isLoading, itemsPerPage: getItemsPerPage, multiSort: getMultiSort, page: getPage, searchText: getSearchText, storage: getStorage });\r\n    var result = {\r\n        api: api,\r\n        state: state,\r\n    };\r\n    return result;\r\n};\r\nexports.default = useDataGrid;\r\n"},"sourceMaps":{"js":{"version":3,"file":"useDataGrid.js","sourceRoot":"","sources":["../../src/Hooks/useDataGrid.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport Transformer, { ColumnModel, CompareOperators, GridRequest, GridResponse } from 'tubular-common';\r\nimport { IDataGrid } from '../DataGridInterfaces/IDataGrid';\r\nimport { IDataGridApi } from '../DataGridInterfaces/IDataGridApi';\r\nimport { IDataGridConfig } from '../DataGridInterfaces/IDataGridConfig';\r\nimport { IDataGridStorage } from '../DataGridInterfaces/IDataGridStorage';\r\nimport { IFilterWrapper } from '../DataGridInterfaces/IFilterWrapper';\r\nimport { LocalStorage } from '../Storage';\r\nimport { NullStorage } from '../Storage/NullStorage';\r\nimport ITubularHttpClient from '../utils/ITubularHttpClient';\r\nimport TubularHttpClient from '../utils/TubularHttpClient';\r\n\r\nconst getRemoteDataSource = (request: string | Request | ITubularHttpClient) =>\r\n    async (gridRequest: GridRequest): Promise<GridResponse> => {\r\n        const httpCast = request as ITubularHttpClient;\r\n        let httpClient: ITubularHttpClient;\r\n\r\n        if (httpCast.request) {\r\n            httpClient = httpCast;\r\n        } else {\r\n            httpClient = new TubularHttpClient(request);\r\n        }\r\n\r\n        const data = await httpClient.fetch(gridRequest);\r\n        if (!TubularHttpClient.isValidResponse(data)) {\r\n            throw new Error('Server response is a invalid Tubular object');\r\n        }\r\n\r\n        data.Payload = data.Payload.map((row: any) => TubularHttpClient.parsePayload(row, gridRequest.Columns));\r\n\r\n        return data;\r\n    };\r\n\r\nconst getLocalDataSource = (source: any[]) =>\r\n    (request: GridRequest): Promise<GridResponse> => {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                resolve(Transformer.getResponse(request, source));\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    };\r\n\r\nconst useDataGrid =\r\n    (\r\n        initColumns: ColumnModel[],\r\n        config: Partial<IDataGridConfig>,\r\n        source: any[] | string | Request | ITubularHttpClient,\r\n        deps?: any[],\r\n    ): IDataGrid => {\r\n\r\n        const [isLoading, setIsLoading] = React.useState(false);\r\n        const [getColumns, setColumns] = React.useState<ColumnModel[]>(initColumns);\r\n        const [initialized, setInitialized] = React.useState(false);\r\n        const [getActiveColumn, setActiveColumn] = React.useState<ColumnModel>(null);\r\n        const [getMultiSort, setMultiSort] = React.useState(false);\r\n        const [getItemsPerPage, setItemsPerPage] = React.useState<number>(config.itemsPerPage || 10);\r\n        const [getStorage] = React.useState<IDataGridStorage>(config.storage || new NullStorage());\r\n        const [getPage, setPage] = React.useState<number>(config.page || 0);\r\n        const [getSearchText, setSearchText] = React.useState<string>(config.searchText || '');\r\n        const [getError, setError] = React.useState(null);\r\n        const getAllRecords = source instanceof Array ? getLocalDataSource(source) : getRemoteDataSource(source);\r\n\r\n        const [getState, setState] = React.useState({\r\n            aggregate: null,\r\n            data: [],\r\n            filteredRecordCount: 0,\r\n            totalRecordCount: 0,\r\n        });\r\n\r\n        if (getStorage instanceof LocalStorage) {\r\n            getStorage.setGridName(config.gridName);\r\n        }\r\n\r\n        const api: IDataGridApi = {\r\n            exportTo: async (allRows: boolean, exportFunc: (payload: any[], columns: ColumnModel[]) => void) => {\r\n                if (getState.filteredRecordCount === 0) {\r\n                    return;\r\n                }\r\n\r\n                let payload: any[] = getState.data;\r\n                if (allRows) {\r\n                    const { Payload } =\r\n                        await getAllRecords(new GridRequest(getColumns, -1, 0, getSearchText));\r\n                    payload = Payload;\r\n                }\r\n\r\n                exportFunc(payload, getColumns);\r\n            },\r\n            goToPage: (page: number) => {\r\n                if (getPage !== page) {\r\n                    setPage(page);\r\n                }\r\n            },\r\n            handleFilterChange: (value: IFilterWrapper) => {\r\n                setActiveColumn({\r\n                    ...getActiveColumn,\r\n                    Filter: {\r\n                        ...getActiveColumn.Filter,\r\n                        ...value,\r\n                    },\r\n                });\r\n            },\r\n            processRequest: async () => {\r\n                setIsLoading(true);\r\n\r\n                try {\r\n                    const request = new GridRequest(getColumns, getItemsPerPage, getPage, getSearchText);\r\n                    const response: GridResponse = await getAllRecords(request);\r\n\r\n                    const maxPage = Math.ceil(response.TotalRecordCount / getItemsPerPage);\r\n                    response.CurrentPage = response.CurrentPage > maxPage ? maxPage : response.CurrentPage;\r\n\r\n                    getStorage.setPage(response.CurrentPage - 1);\r\n                    getStorage.setColumns(getColumns);\r\n                    getStorage.setTextSearch(getSearchText);\r\n\r\n                    setState({\r\n                        aggregate: response.AggregationPayload,\r\n                        data: response.Payload,\r\n                        filteredRecordCount: response.FilteredRecordCount || 0,\r\n                        totalRecordCount: response.TotalRecordCount || 0,\r\n                    });\r\n\r\n                    setIsLoading(false);\r\n                    setInitialized(true);\r\n                    setError(null);\r\n                    setPage(response.CurrentPage - 1);\r\n                }\r\n                catch (err) {\r\n                    if (config.onError) {\r\n                        config.onError(err);\r\n                    }\r\n\r\n                    setIsLoading(false);\r\n                    setError(err);\r\n                }\r\n            },\r\n            setActiveColumn,\r\n            setFilter: (value: IFilterWrapper) => {\r\n\r\n                const columns = [...getColumns];\r\n                const column = columns.find(\r\n                    (c: ColumnModel) => c.Name === getActiveColumn.Name,\r\n                );\r\n                if (!column) {\r\n                    return;\r\n                }\r\n\r\n                column.Filter = {\r\n                    ...getActiveColumn.Filter,\r\n                    ...value,\r\n                };\r\n\r\n                setColumns([...columns]);\r\n            },\r\n            sortColumn: (property: string) => {\r\n                const columns = ColumnModel.sortColumnArray(\r\n                    property,\r\n                    [...getColumns],\r\n                    getMultiSort,\r\n                );\r\n\r\n                setColumns(columns);\r\n            },\r\n            updateItemPerPage: (itemsPerPage: number) => {\r\n                if (getItemsPerPage !== itemsPerPage) {\r\n                    setItemsPerPage(itemsPerPage);\r\n                }\r\n            },\r\n            updateSearchText: (searchText: string) => {\r\n                if (getSearchText !== searchText) {\r\n                    setSearchText(searchText);\r\n                }\r\n            },\r\n        };\r\n\r\n        let dependencies = [getColumns, getPage, getSearchText, getItemsPerPage, source];\r\n\r\n        if (deps) {\r\n            dependencies = dependencies.concat(deps);\r\n        }\r\n\r\n        React.useEffect(() => {\r\n            api.processRequest();\r\n        }, dependencies);\r\n\r\n        const initGrid = () => {\r\n            if (getStorage.getPage()) {\r\n                setPage(getStorage.getPage());\r\n            }\r\n\r\n            const storedColumns = getStorage.getColumns();\r\n\r\n            if (storedColumns) {\r\n                const columns = [...getColumns];\r\n\r\n                storedColumns.forEach((column) => {\r\n                    const currentColumn = columns.find((col: ColumnModel) => col.Name === column.Name);\r\n\r\n                    if (!currentColumn) {\r\n                        return;\r\n                    }\r\n\r\n                    currentColumn.Visible = column.Visible;\r\n\r\n                    if (currentColumn.Filter !== null && currentColumn.Filter.Text !== null) {\r\n                        return;\r\n                    }\r\n\r\n                    if (column.Filter != null &&\r\n                        column.Filter.Text != null &&\r\n                        column.Filter.Operator !== CompareOperators.NONE) {\r\n                        currentColumn.Filter = column.Filter;\r\n                    }\r\n                });\r\n\r\n                setColumns(columns);\r\n            }\r\n\r\n            setInitialized(true);\r\n        };\r\n\r\n        if (!initialized) {\r\n            initGrid();\r\n        }\r\n\r\n        const state = {\r\n            ...getState,\r\n            activeColumn: getActiveColumn,\r\n            columns: getColumns,\r\n            error: getError,\r\n            initialized,\r\n            isLoading,\r\n            itemsPerPage: getItemsPerPage,\r\n            multiSort: getMultiSort,\r\n            page: getPage,\r\n            searchText: getSearchText,\r\n            storage: getStorage,\r\n        };\r\n\r\n        const result = {\r\n            api,\r\n            state,\r\n        };\r\n\r\n        return result;\r\n    };\r\n\r\nexport default useDataGrid;\r\n"]}},"error":null,"hash":"459da89a89f1baa641c8d5e819c930e5","cacheData":{"env":{}}}
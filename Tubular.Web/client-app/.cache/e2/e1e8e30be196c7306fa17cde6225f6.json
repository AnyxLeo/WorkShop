{"id":"../node_modules/tubular-react/dist/Toolbar/GridToolbarFunctions.js","dependencies":[{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Toolbar\\GridToolbarFunctions.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\src\\Toolbar\\GridToolbarFunctions.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\package.json","includedInParent":true,"mtime":1567469419529},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\package.json","includedInParent":true,"mtime":1567480634804},{"name":"tubular-common","loc":{"line":3,"column":31},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Toolbar\\GridToolbarFunctions.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-common\\dist\\index.js"},{"name":"date-fns/format","loc":{"line":5,"column":21},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Toolbar\\GridToolbarFunctions.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\date-fns\\format\\index.js"},{"name":"date-fns/get_year","loc":{"line":7,"column":22},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Toolbar\\GridToolbarFunctions.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\date-fns\\get_year\\index.js"},{"name":"date-fns/parse","loc":{"line":9,"column":20},"parent":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-react\\dist\\Toolbar\\GridToolbarFunctions.js","resolved":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\date-fns\\parse\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tubular_common_1 = require(\"tubular-common\");\r\n// tslint:disable-next-line: no-var-requires\r\nvar format = require('date-fns/format');\r\n// tslint:disable-next-line: no-var-requires\r\nvar getYear = require('date-fns/get_year');\r\n// tslint:disable-next-line: no-var-requires\r\nvar parse = require('date-fns/parse');\r\nvar cellValue = function (cellDataType, cell) {\r\n    switch (cellDataType) {\r\n        case tubular_common_1.ColumnDataType.DATE:\r\n            return !cell\r\n                ? ''\r\n                : getYear(parse(cell)) > 0 ? format(cell, 'M/D/YYYY') : '';\r\n        case tubular_common_1.ColumnDataType.DATE_TIME:\r\n        case tubular_common_1.ColumnDataType.DATE_TIME_UTC:\r\n            return !cell\r\n                ? ''\r\n                : getYear(parse(cell)) > 0 ? format(cell, 'M/D/YYYY h:mm A') : '';\r\n        case tubular_common_1.ColumnDataType.BOOLEAN:\r\n            return (cell === true ? 'Yes' : 'No');\r\n        default:\r\n            return (cell || '').toString();\r\n    }\r\n};\r\nvar objToArray = function (row) { return row instanceof Object\r\n    ? Object.keys(row).map(function (key) { return row[key]; })\r\n    : row; };\r\nvar processRow = function (row, columns, ignoreType) {\r\n    var finalVal = objToArray(row)\r\n        .reduce(function (prev, value, i) {\r\n        if (!columns[i].Visible) {\r\n            return;\r\n        }\r\n        var result = cellValue(ignoreType ? tubular_common_1.ColumnDataType.STRING : columns[i].DataType, value)\r\n            .replace(/\"/g, '\"\"');\r\n        if (result.search(/(\"|,|\\n)/g) >= 0) {\r\n            result = \"\\\"\" + result + \"\\\"\";\r\n        }\r\n        return \"\" + prev + (i > 0 ? ',' : '') + result;\r\n    }, '');\r\n    return finalVal + \"\\n\";\r\n};\r\nfunction printDoc(gridResult, columns, gridName) {\r\n    var tableHtml = \"<table class=\\\"table table-bordered table-striped\\\"><thead><tr>\" + columns\r\n        .filter(function (c) { return c.Visible; })\r\n        .reduce(function (prev, el) { return prev + \"<th>\" + (el.Label || el.Name) + \"</th>\"; }, '') + \"</tr></thead><tbody>\" + gridResult.reduce(function (prevRow, row) {\r\n        return prevRow + \"<tr>\" + objToArray(row).reduce(function (prev, cell, index) {\r\n            return !columns[index].Visible ? prev : prev + \"<td>\" + cellValue(columns[index].DataType, cell) + \"</td>\";\r\n        }, '') + \"</tr>\";\r\n    }, '') + \"</tbody></table>\";\r\n    var documentToPrint = window.open('about:blank', 'Print', 'location=0,height=500,width=800');\r\n    documentToPrint.document\r\n        .write('<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/bootstrap/latest/css/bootstrap.min.css\" />');\r\n    documentToPrint.document.title = gridName;\r\n    documentToPrint.document.write('<body onload=\"window.print();\">');\r\n    documentToPrint.document.write(\"<h1>\" + gridName + \"</h1>\");\r\n    documentToPrint.document.write(tableHtml);\r\n    documentToPrint.document.write('</body>');\r\n    documentToPrint.document.close();\r\n}\r\nfunction exportFile(gridResult, columns) {\r\n    var csvFile = gridResult.reduce(function (prev, row) { return prev + processRow(row, columns, false); }, processRow(columns.map(function (x) { return x.Label; }), columns, true));\r\n    var fileURL = URL.createObjectURL(new Blob([\"\\uFEFF\" + csvFile], {\r\n        type: 'text/csv;charset=utf-8;',\r\n    }));\r\n    var downloadLink = document.createElement('a');\r\n    downloadLink.setAttribute('href', fileURL);\r\n    downloadLink.setAttribute('id', 'download');\r\n    downloadLink.setAttribute('download', 'data.csv');\r\n    document.body.appendChild(downloadLink);\r\n    downloadLink.click();\r\n    URL.revokeObjectURL(fileURL);\r\n}\r\nexports.exportGrid = function (media, gridResult, columns, gridName) {\r\n    if (media === 'csv') {\r\n        exportFile(gridResult, columns);\r\n    }\r\n    else {\r\n        printDoc(gridResult, columns, gridName);\r\n    }\r\n};\r\n"},"sourceMaps":{"js":{"version":3,"file":"GridToolbarFunctions.js","sourceRoot":"","sources":["../../src/Toolbar/GridToolbarFunctions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ColumnDataType } from 'tubular-common';\r\n\r\n// tslint:disable-next-line: no-var-requires\r\nconst format = require('date-fns/format');\r\n// tslint:disable-next-line: no-var-requires\r\nconst getYear = require('date-fns/get_year');\r\n// tslint:disable-next-line: no-var-requires\r\nconst parse = require('date-fns/parse');\r\n\r\nfunction parseDateTime(cell: any, stringFormat: string) {\r\n    if (!cell) {\r\n        return '';\r\n    }\r\n\r\n    const dateParsed = parse(cell);\r\n    return getYear(dateParsed) > 0 ? format(dateParsed, stringFormat) : '';\r\n}\r\nconst cellValue = (cellDataType: string, cell: any) => {\r\n    switch (cellDataType) {\r\n        case ColumnDataType.DATE:\r\n            return parseDateTime(cell, 'M/D/YYYY');\r\n        case ColumnDataType.DATE_TIME:\r\n        case ColumnDataType.DATE_TIME_UTC:\r\n            return parseDateTime(cell, 'M/D/YYYY h:mm A');\r\n        case ColumnDataType.BOOLEAN:\r\n            return (cell === true ? 'Yes' : 'No');\r\n        default:\r\n            return (cell || '').toString();\r\n    }\r\n};\r\n\r\nconst objToArray = (row: any) => row instanceof Object\r\n    ? Object.keys(row).map((key: any) => row[key])\r\n    : row;\r\n\r\nconst processRow = (row: any, columns: any[], ignoreType: boolean) => {\r\n    const finalVal = objToArray(row)\r\n        .reduce((prev: any, value: any, i: any) => {\r\n            if (!columns[i].Visible) { return; }\r\n\r\n            let result = cellValue(ignoreType ? ColumnDataType.STRING : columns[i].DataType, value)\r\n                .replace(/\"/g, '\"\"');\r\n\r\n            if (result.search(/(\"|,|\\n)/g) >= 0) {\r\n                result = `\"${result}\"`;\r\n            }\r\n\r\n            return `${prev}${i > 0 ? ',' : ''}${result}`;\r\n        }, '');\r\n\r\n    return `${finalVal}\\n`;\r\n};\r\n\r\nfunction printDoc(gridResult: any, columns: any, gridName: string) {\r\n    const tableHtml = `<table class=\"table table-bordered table-striped\"><thead><tr>${\r\n        columns\r\n            .filter((c: any) => c.Visible)\r\n            .reduce((prev: any, el: any) => `${prev}<th>${el.Label || el.Name}</th>`, '')\r\n        }</tr></thead><tbody>${\r\n        gridResult.reduce((prevRow: string, row: any) =>\r\n            `${prevRow}<tr>${objToArray(row).reduce((prev: string, cell: any, index: number) =>\r\n                !columns[index].Visible ? prev : `${prev}<td>${cellValue(columns[index].DataType, cell)}</td>`,\r\n                '')}</tr>`\r\n            , '')}</tbody></table>`;\r\n\r\n    const documentToPrint = window.open('about:blank', 'Print', 'location=0,height=500,width=800');\r\n    documentToPrint.document\r\n        .write('<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/bootstrap/latest/css/bootstrap.min.css\" />');\r\n    documentToPrint.document.title = gridName;\r\n    documentToPrint.document.write('<body onload=\"window.print();\">');\r\n    documentToPrint.document.write(`<h1>${gridName}</h1>`);\r\n    documentToPrint.document.write(tableHtml);\r\n    documentToPrint.document.write('</body>');\r\n    documentToPrint.document.close();\r\n}\r\n\r\nfunction exportFile(gridResult: any, columns: any) {\r\n    const csvFile = gridResult.reduce(\r\n        (prev: string, row: any) => prev + processRow(row, columns, false),\r\n        processRow(columns.map((x: any) => x.Label), columns, true));\r\n\r\n    const fileURL = URL.createObjectURL(new Blob([`\\uFEFF${csvFile}`], {\r\n        type: 'text/csv;charset=utf-8;',\r\n    }));\r\n\r\n    const downloadLink = document.createElement('a');\r\n\r\n    downloadLink.setAttribute('href', fileURL);\r\n    downloadLink.setAttribute('id', 'download');\r\n    downloadLink.setAttribute('download', 'data.csv');\r\n    document.body.appendChild(downloadLink);\r\n\r\n    downloadLink.click();\r\n    URL.revokeObjectURL(fileURL);\r\n}\r\n\r\nexport const exportGrid = (media: string, gridResult: any, columns: any, gridName: string) => {\r\n    if (media === 'csv') {\r\n        exportFile(gridResult, columns);\r\n    } else {\r\n        printDoc(gridResult, columns, gridName);\r\n    }\r\n};\r\n"]}},"error":null,"hash":"1661cd3a6cc42bed9b4340862747a9a2","cacheData":{"env":{}}}
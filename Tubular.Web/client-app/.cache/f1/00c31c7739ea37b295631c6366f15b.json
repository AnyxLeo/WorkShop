{"id":"../node_modules/tubular-common/dist/date-utils.js","dependencies":[{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-common\\dist\\date-utils.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-common\\src\\date-utils.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\package.json","includedInParent":true,"mtime":1567469419529},{"name":"C:\\Users\\Anyx\\Documents\\Unosquare\\Tubular\\Tubular.Web\\client-app\\node_modules\\tubular-common\\package.json","includedInParent":true,"mtime":1567480635442}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// the following function is based on https://github.com/date-fns/date-fns/blob/master/src/toDate/index.js\r\nvar MILLISECONDS_IN_HOUR = 3600000;\r\nvar MILLISECONDS_IN_MINUTE = 60000;\r\nvar patterns = {\r\n    dateTimeDelimeter: /[T ]/,\r\n    plainTime: /:/,\r\n    timeZoneDelimeter: /[Z ]/i,\r\n    // year tokens\r\n    YY: /^(\\d{2})$/,\r\n    YYY: [\r\n        /^([+-]\\d{2})$/,\r\n        /^([+-]\\d{3})$/,\r\n        /^([+-]\\d{4})$/ // 2 additional digits\r\n    ],\r\n    YYYY: /^(\\d{4})/,\r\n    YYYYY: [\r\n        /^([+-]\\d{4})/,\r\n        /^([+-]\\d{5})/,\r\n        /^([+-]\\d{6})/ // 2 additional digits\r\n    ],\r\n    // date tokens\r\n    MM: /^-(\\d{2})$/,\r\n    // tslint:disable-next-line:object-literal-sort-keys\r\n    DDD: /^-?(\\d{3})$/,\r\n    MMDD: /^-?(\\d{2})-?(\\d{2})$/,\r\n    Www: /^-?W(\\d{2})$/,\r\n    WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\r\n    HH: /^(\\d{2}([.,]\\d*)?)$/,\r\n    HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\r\n    HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\r\n    // timezone tokens\r\n    timezone: /([Z+-].*)$/,\r\n    timezoneZ: /^(Z)$/,\r\n    timezoneHH: /^([+-])(\\d{2})$/,\r\n    timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/\r\n};\r\n/**\r\n * @name toDate\r\n * @category Common Helpers\r\n * @summary Convert the given argument to an instance of Date.\r\n *\r\n * @description\r\n * Convert the given argument to an instance of Date.\r\n *\r\n * If the argument is an instance of Date, the function returns its clone.\r\n *\r\n * If the argument is a number, it is treated as a timestamp.\r\n *\r\n * If an argument is a string, the function tries to parse it.\r\n * Function accepts complete ISO 8601 formats as well as partial implementations.\r\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\r\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\r\n *\r\n * If the argument is none of the above, the function returns Invalid Date.\r\n *\r\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\r\n *\r\n * @param {Date|String|Number} argument - the value to convert\r\n */\r\nfunction toDate(argument) {\r\n    if (argument === null) {\r\n        return new Date(NaN);\r\n    }\r\n    var additionalDigits = 2;\r\n    // Clone the date\r\n    if (argument instanceof Date ||\r\n        (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')) {\r\n        // Prevent the date to lose the milliseconds when passed to new Date() in IE10\r\n        return new Date(argument.getTime());\r\n    }\r\n    else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {\r\n        return new Date(argument);\r\n    }\r\n    else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\r\n        return new Date(NaN);\r\n    }\r\n    var dateStrings = splitDateString(argument);\r\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\r\n    var year = parseYearResult.year;\r\n    var restDateString = parseYearResult.restDateString;\r\n    var date = parseDate(restDateString, year);\r\n    if (date) {\r\n        var timestamp = date.getTime();\r\n        var time = 0;\r\n        var offset = void 0;\r\n        if (dateStrings.time) {\r\n            time = parseTime(dateStrings.time);\r\n            if (isNaN(time)) {\r\n                return new Date(NaN);\r\n            }\r\n        }\r\n        if (dateStrings.timezone) {\r\n            offset = parseTimezone(dateStrings.timezone);\r\n            if (isNaN(offset)) {\r\n                return new Date(NaN);\r\n            }\r\n        }\r\n        else {\r\n            // get offset accurate to hour in timezones that change offset\r\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\r\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\r\n        }\r\n        return new Date(timestamp + time + offset);\r\n    }\r\n    else {\r\n        return new Date(NaN);\r\n    }\r\n}\r\nexports.default = toDate;\r\nfunction getTimezoneOffsetInMilliseconds(dirtyDate) {\r\n    var date = new Date(dirtyDate.getTime());\r\n    var baseTimezoneOffset = date.getTimezoneOffset();\r\n    date.setSeconds(0, 0);\r\n    var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;\r\n    return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\r\n}\r\nfunction splitDateString(dateString) {\r\n    var dateStrings = {};\r\n    var array = dateString.split(patterns.dateTimeDelimeter);\r\n    var timeString;\r\n    if (patterns.plainTime.test(array[0])) {\r\n        dateStrings.date = null;\r\n        timeString = array[0];\r\n    }\r\n    else {\r\n        dateStrings.date = array[0];\r\n        timeString = array[1];\r\n        if (patterns.timeZoneDelimeter.test(dateStrings.date)) {\r\n            dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0];\r\n            timeString = dateString.substr(dateStrings.date.length, dateString.length);\r\n        }\r\n    }\r\n    if (timeString) {\r\n        var token = patterns.timezone.exec(timeString);\r\n        if (token) {\r\n            dateStrings.time = timeString.replace(token[1], '');\r\n            dateStrings.timezone = token[1];\r\n        }\r\n        else {\r\n            dateStrings.time = timeString;\r\n        }\r\n    }\r\n    return dateStrings;\r\n}\r\nfunction parseYear(dateString, additionalDigits) {\r\n    var patternYYY = patterns.YYY[additionalDigits];\r\n    var patternYYYYY = patterns.YYYYY[additionalDigits];\r\n    var token;\r\n    // YYYY or ±YYYYY\r\n    token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\r\n    if (token) {\r\n        var yearString = token[1];\r\n        return {\r\n            restDateString: dateString.slice(yearString.length),\r\n            year: parseInt(yearString, 10)\r\n        };\r\n    }\r\n    // YY or ±YYY\r\n    token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\r\n    if (token) {\r\n        var centuryString = token[1];\r\n        return {\r\n            restDateString: dateString.slice(centuryString.length),\r\n            year: parseInt(centuryString, 10) * 100\r\n        };\r\n    }\r\n    // Invalid ISO-formatted year\r\n    return {\r\n        year: null\r\n    };\r\n}\r\nfunction parseDate(dateString, year) {\r\n    // Invalid ISO-formatted year\r\n    if (year === null) {\r\n        return null;\r\n    }\r\n    var token;\r\n    var date;\r\n    var month;\r\n    var week;\r\n    // YYYY\r\n    if (dateString.length === 0) {\r\n        date = new Date(0);\r\n        date.setUTCFullYear(year);\r\n        return date;\r\n    }\r\n    // YYYY-MM\r\n    token = patterns.MM.exec(dateString);\r\n    if (token) {\r\n        date = new Date(0);\r\n        month = parseInt(token[1], 10) - 1;\r\n        if (!validateDate(year, month)) {\r\n            return new Date(NaN);\r\n        }\r\n        date.setUTCFullYear(year, month);\r\n        return date;\r\n    }\r\n    // YYYY-DDD or YYYYDDD\r\n    token = patterns.DDD.exec(dateString);\r\n    if (token) {\r\n        date = new Date(0);\r\n        var dayOfYear = parseInt(token[1], 10);\r\n        if (!validateDayOfYearDate(year, dayOfYear)) {\r\n            return new Date(NaN);\r\n        }\r\n        date.setUTCFullYear(year, 0, dayOfYear);\r\n        return date;\r\n    }\r\n    // YYYY-MM-DD or YYYYMMDD\r\n    token = patterns.MMDD.exec(dateString);\r\n    if (token) {\r\n        date = new Date(0);\r\n        month = parseInt(token[1], 10) - 1;\r\n        var day = parseInt(token[2], 10);\r\n        if (!validateDate(year, month, day)) {\r\n            return new Date(NaN);\r\n        }\r\n        date.setUTCFullYear(year, month, day);\r\n        return date;\r\n    }\r\n    // YYYY-Www or YYYYWww\r\n    token = patterns.Www.exec(dateString);\r\n    if (token) {\r\n        week = parseInt(token[1], 10) - 1;\r\n        if (!validateWeekDate(week)) {\r\n            return new Date(NaN);\r\n        }\r\n        return dayOfISOWeekYear(year, week);\r\n    }\r\n    // YYYY-Www-D or YYYYWwwD\r\n    token = patterns.WwwD.exec(dateString);\r\n    if (token) {\r\n        week = parseInt(token[1], 10) - 1;\r\n        var dayOfWeek = parseInt(token[2], 10) - 1;\r\n        if (!validateWeekDate(week, dayOfWeek)) {\r\n            return new Date(NaN);\r\n        }\r\n        return dayOfISOWeekYear(year, week, dayOfWeek);\r\n    }\r\n    // Invalid ISO-formatted date\r\n    return null;\r\n}\r\nfunction parseTime(timeString) {\r\n    var token;\r\n    var hours;\r\n    var minutes;\r\n    // hh\r\n    token = patterns.HH.exec(timeString);\r\n    if (token) {\r\n        hours = parseFloat(token[1].replace(',', '.'));\r\n        if (!validateTime(hours)) {\r\n            return NaN;\r\n        }\r\n        return (hours % 24) * MILLISECONDS_IN_HOUR;\r\n    }\r\n    // hh:mm or hhmm\r\n    token = patterns.HHMM.exec(timeString);\r\n    if (token) {\r\n        hours = parseInt(token[1], 10);\r\n        minutes = parseFloat(token[2].replace(',', '.'));\r\n        if (!validateTime(hours, minutes)) {\r\n            return NaN;\r\n        }\r\n        return (hours % 24) * MILLISECONDS_IN_HOUR +\r\n            minutes * MILLISECONDS_IN_MINUTE;\r\n    }\r\n    // hh:mm:ss or hhmmss\r\n    token = patterns.HHMMSS.exec(timeString);\r\n    if (token) {\r\n        hours = parseInt(token[1], 10);\r\n        minutes = parseInt(token[2], 10);\r\n        var seconds = parseFloat(token[3].replace(',', '.'));\r\n        if (!validateTime(hours, minutes, seconds)) {\r\n            return NaN;\r\n        }\r\n        return (hours % 24) * MILLISECONDS_IN_HOUR +\r\n            minutes * MILLISECONDS_IN_MINUTE +\r\n            seconds * 1000;\r\n    }\r\n    // Invalid ISO-formatted time\r\n    return null;\r\n}\r\nfunction parseTimezone(timezoneString) {\r\n    var token;\r\n    var absoluteOffset;\r\n    // Z\r\n    token = patterns.timezoneZ.exec(timezoneString);\r\n    if (token) {\r\n        return 0;\r\n    }\r\n    var hours;\r\n    // ±hh\r\n    token = patterns.timezoneHH.exec(timezoneString);\r\n    if (token) {\r\n        hours = parseInt(token[2], 10);\r\n        absoluteOffset = hours * MILLISECONDS_IN_HOUR;\r\n        return (token[1] === '+') ? -absoluteOffset : absoluteOffset;\r\n    }\r\n    // ±hh:mm or ±hhmm\r\n    token = patterns.timezoneHHMM.exec(timezoneString);\r\n    if (token) {\r\n        hours = parseInt(token[2], 10);\r\n        var minutes = parseInt(token[3], 10);\r\n        if (!validateTimezone(minutes)) {\r\n            return NaN;\r\n        }\r\n        absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\r\n        return (token[1] === '+') ? -absoluteOffset : absoluteOffset;\r\n    }\r\n    return 0;\r\n}\r\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\r\n    week = week || 0;\r\n    day = day || 0;\r\n    var date = new Date(0);\r\n    date.setUTCFullYear(isoWeekYear, 0, 4);\r\n    var fourthOfJanuaryDay = date.getUTCDay() || 7;\r\n    var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\r\n    date.setUTCDate(date.getUTCDate() + diff);\r\n    return date;\r\n}\r\n// Validation functions\r\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\nfunction isLeapYearIndex(year) {\r\n    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\r\n}\r\nfunction validateDate(year, month, date) {\r\n    if (month < 0 || month > 11) {\r\n        return false;\r\n    }\r\n    if (date != null) {\r\n        if (date < 1) {\r\n            return false;\r\n        }\r\n        var isLeapYear = isLeapYearIndex(year);\r\n        if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\r\n            return false;\r\n        }\r\n        if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction validateDayOfYearDate(year, dayOfYear) {\r\n    if (dayOfYear < 1) {\r\n        return false;\r\n    }\r\n    var isLeapYear = isLeapYearIndex(year);\r\n    if (isLeapYear && dayOfYear > 366) {\r\n        return false;\r\n    }\r\n    if (!isLeapYear && dayOfYear > 365) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction validateWeekDate(week, day) {\r\n    if (week < 0 || week > 52) {\r\n        return false;\r\n    }\r\n    if (day != null && (day < 0 || day > 6)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction validateTime(hours, minutes, seconds) {\r\n    if (hours != null && (hours < 0 || hours >= 25)) {\r\n        return false;\r\n    }\r\n    if (minutes != null && (minutes < 0 || minutes >= 60)) {\r\n        return false;\r\n    }\r\n    if (seconds != null && (seconds < 0 || seconds >= 60)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction validateTimezone(minutes) {\r\n    return !(minutes < 0 || minutes > 59);\r\n}\r\n"},"sourceMaps":{"js":{"version":3,"file":"date-utils.js","sourceRoot":"","sources":["../src/date-utils.ts"],"names":[],"mappings":"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","sourcesContent":["// the following function is based on https://github.com/date-fns/date-fns/blob/master/src/toDate/index.js\r\nconst MILLISECONDS_IN_HOUR = 3600000;\r\nconst MILLISECONDS_IN_MINUTE = 60000;\r\n\r\nconst patterns = {\r\n    dateTimeDelimeter: /[T ]/,\r\n    plainTime: /:/,\r\n    timeZoneDelimeter: /[Z ]/i,\r\n\r\n    // year tokens\r\n    YY: /^(\\d{2})$/,\r\n    YYY: [\r\n        /^([+-]\\d{2})$/, // 0 additional digits\r\n        /^([+-]\\d{3})$/, // 1 additional digit\r\n        /^([+-]\\d{4})$/ // 2 additional digits\r\n    ],\r\n    YYYY: /^(\\d{4})/,\r\n    YYYYY: [\r\n        /^([+-]\\d{4})/, // 0 additional digits\r\n        /^([+-]\\d{5})/, // 1 additional digit\r\n        /^([+-]\\d{6})/ // 2 additional digits\r\n    ],\r\n\r\n    // date tokens\r\n    MM: /^-(\\d{2})$/,\r\n    // tslint:disable-next-line:object-literal-sort-keys\r\n    DDD: /^-?(\\d{3})$/,\r\n    MMDD: /^-?(\\d{2})-?(\\d{2})$/,\r\n    Www: /^-?W(\\d{2})$/,\r\n    WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\r\n\r\n    HH: /^(\\d{2}([.,]\\d*)?)$/,\r\n    HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\r\n    HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\r\n\r\n    // timezone tokens\r\n    timezone: /([Z+-].*)$/,\r\n    timezoneZ: /^(Z)$/,\r\n    timezoneHH: /^([+-])(\\d{2})$/,\r\n    timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/\r\n};\r\n\r\n/**\r\n * @name toDate\r\n * @category Common Helpers\r\n * @summary Convert the given argument to an instance of Date.\r\n *\r\n * @description\r\n * Convert the given argument to an instance of Date.\r\n *\r\n * If the argument is an instance of Date, the function returns its clone.\r\n *\r\n * If the argument is a number, it is treated as a timestamp.\r\n *\r\n * If an argument is a string, the function tries to parse it.\r\n * Function accepts complete ISO 8601 formats as well as partial implementations.\r\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\r\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\r\n *\r\n * If the argument is none of the above, the function returns Invalid Date.\r\n *\r\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\r\n *\r\n * @param {Date|String|Number} argument - the value to convert\r\n */\r\nexport default function toDate(argument: Date | string | number) {\r\n    if (argument === null) {\r\n        return new Date(NaN);\r\n    }\r\n\r\n    const additionalDigits = 2;\r\n\r\n    // Clone the date\r\n    if (argument instanceof Date ||\r\n        (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')\r\n    ) {\r\n        // Prevent the date to lose the milliseconds when passed to new Date() in IE10\r\n        return new Date(argument.getTime());\r\n    } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {\r\n        return new Date(argument);\r\n    } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\r\n        return new Date(NaN);\r\n    }\r\n\r\n    const dateStrings: any = splitDateString(argument);\r\n\r\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\r\n    const year = parseYearResult.year;\r\n    const restDateString = parseYearResult.restDateString;\r\n\r\n    const date = parseDate(restDateString, year);\r\n\r\n    if (date) {\r\n        const timestamp = date.getTime();\r\n        let time = 0;\r\n        let offset: number;\r\n\r\n        if (dateStrings.time) {\r\n            time = parseTime(dateStrings.time);\r\n\r\n            if (isNaN(time)) {\r\n                return new Date(NaN);\r\n            }\r\n        }\r\n\r\n        if (dateStrings.timezone) {\r\n            offset = parseTimezone(dateStrings.timezone);\r\n            if (isNaN(offset)) {\r\n                return new Date(NaN);\r\n            }\r\n        } else {\r\n            // get offset accurate to hour in timezones that change offset\r\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\r\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\r\n        }\r\n\r\n        return new Date(timestamp + time + offset);\r\n    } else {\r\n        return new Date(NaN);\r\n    }\r\n}\r\n\r\nfunction getTimezoneOffsetInMilliseconds(dirtyDate: Date) {\r\n    const date = new Date(dirtyDate.getTime());\r\n    const baseTimezoneOffset = date.getTimezoneOffset();\r\n    date.setSeconds(0, 0);\r\n    const millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;\r\n\r\n    return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\r\n}\r\n\r\nfunction splitDateString(dateString: string) {\r\n    const dateStrings: any = {};\r\n    const array = dateString.split(patterns.dateTimeDelimeter);\r\n    let timeString: string;\r\n\r\n    if (patterns.plainTime.test(array[0])) {\r\n        dateStrings.date = null;\r\n        timeString = array[0];\r\n    } else {\r\n        dateStrings.date = array[0];\r\n        timeString = array[1];\r\n        if (patterns.timeZoneDelimeter.test(dateStrings.date)) {\r\n            dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0];\r\n            timeString = dateString.substr(dateStrings.date.length, dateString.length);\r\n        }\r\n    }\r\n\r\n    if (timeString) {\r\n        const token = patterns.timezone.exec(timeString);\r\n        if (token) {\r\n            dateStrings.time = timeString.replace(token[1], '');\r\n            dateStrings.timezone = token[1];\r\n        } else {\r\n            dateStrings.time = timeString;\r\n        }\r\n    }\r\n\r\n    return dateStrings;\r\n}\r\n\r\nfunction parseYear(dateString: string, additionalDigits: number) {\r\n    const patternYYY = patterns.YYY[additionalDigits];\r\n    const patternYYYYY = patterns.YYYYY[additionalDigits];\r\n\r\n    let token: any[] | RegExpExecArray;\r\n\r\n    // YYYY or ±YYYYY\r\n    token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\r\n    if (token) {\r\n        const yearString = token[1];\r\n        return {\r\n            restDateString: dateString.slice(yearString.length),\r\n            year: parseInt(yearString, 10)\r\n        };\r\n    }\r\n\r\n    // YY or ±YYY\r\n    token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\r\n    if (token) {\r\n        const centuryString = token[1];\r\n        return {\r\n            restDateString: dateString.slice(centuryString.length),\r\n            year: parseInt(centuryString, 10) * 100\r\n        };\r\n    }\r\n\r\n    // Invalid ISO-formatted year\r\n    return {\r\n        year: null\r\n    };\r\n}\r\n\r\nfunction parseDate(dateString: string, year: number) {\r\n    // Invalid ISO-formatted year\r\n    if (year === null) {\r\n        return null;\r\n    }\r\n\r\n    let token: RegExpExecArray | string[];\r\n    let date: Date;\r\n    let month: number;\r\n    let week: number;\r\n\r\n    // YYYY\r\n    if (dateString.length === 0) {\r\n        date = new Date(0);\r\n        date.setUTCFullYear(year);\r\n        return date;\r\n    }\r\n\r\n    // YYYY-MM\r\n    token = patterns.MM.exec(dateString);\r\n    if (token) {\r\n        date = new Date(0);\r\n        month = parseInt(token[1], 10) - 1;\r\n\r\n        if (!validateDate(year, month)) {\r\n            return new Date(NaN);\r\n        }\r\n\r\n        date.setUTCFullYear(year, month);\r\n        return date;\r\n    }\r\n\r\n    // YYYY-DDD or YYYYDDD\r\n    token = patterns.DDD.exec(dateString);\r\n    if (token) {\r\n        date = new Date(0);\r\n        const dayOfYear = parseInt(token[1], 10);\r\n\r\n        if (!validateDayOfYearDate(year, dayOfYear)) {\r\n            return new Date(NaN);\r\n        }\r\n\r\n        date.setUTCFullYear(year, 0, dayOfYear);\r\n        return date;\r\n    }\r\n\r\n    // YYYY-MM-DD or YYYYMMDD\r\n    token = patterns.MMDD.exec(dateString);\r\n    if (token) {\r\n        date = new Date(0);\r\n        month = parseInt(token[1], 10) - 1;\r\n        const day = parseInt(token[2], 10);\r\n\r\n        if (!validateDate(year, month, day)) {\r\n            return new Date(NaN);\r\n        }\r\n\r\n        date.setUTCFullYear(year, month, day);\r\n        return date;\r\n    }\r\n\r\n    // YYYY-Www or YYYYWww\r\n    token = patterns.Www.exec(dateString);\r\n    if (token) {\r\n        week = parseInt(token[1], 10) - 1;\r\n\r\n        if (!validateWeekDate(week)) {\r\n            return new Date(NaN);\r\n        }\r\n\r\n        return dayOfISOWeekYear(year, week);\r\n    }\r\n\r\n    // YYYY-Www-D or YYYYWwwD\r\n    token = patterns.WwwD.exec(dateString);\r\n    if (token) {\r\n        week = parseInt(token[1], 10) - 1;\r\n        const dayOfWeek = parseInt(token[2], 10) - 1;\r\n\r\n        if (!validateWeekDate(week, dayOfWeek)) {\r\n            return new Date(NaN);\r\n        }\r\n\r\n        return dayOfISOWeekYear(year, week, dayOfWeek);\r\n    }\r\n\r\n    // Invalid ISO-formatted date\r\n    return null;\r\n}\r\n\r\nfunction parseTime(timeString: string) {\r\n    let token: RegExpExecArray | string[];\r\n    let hours: number;\r\n    let minutes: number;\r\n\r\n    // hh\r\n    token = patterns.HH.exec(timeString);\r\n    if (token) {\r\n        hours = parseFloat(token[1].replace(',', '.'));\r\n\r\n        if (!validateTime(hours)) {\r\n            return NaN;\r\n        }\r\n\r\n        return (hours % 24) * MILLISECONDS_IN_HOUR;\r\n    }\r\n\r\n    // hh:mm or hhmm\r\n    token = patterns.HHMM.exec(timeString);\r\n    if (token) {\r\n        hours = parseInt(token[1], 10);\r\n        minutes = parseFloat(token[2].replace(',', '.'));\r\n\r\n        if (!validateTime(hours, minutes)) {\r\n            return NaN;\r\n        }\r\n\r\n        return (hours % 24) * MILLISECONDS_IN_HOUR +\r\n            minutes * MILLISECONDS_IN_MINUTE;\r\n    }\r\n\r\n    // hh:mm:ss or hhmmss\r\n    token = patterns.HHMMSS.exec(timeString);\r\n    if (token) {\r\n        hours = parseInt(token[1], 10);\r\n        minutes = parseInt(token[2], 10);\r\n        const seconds = parseFloat(token[3].replace(',', '.'));\r\n\r\n        if (!validateTime(hours, minutes, seconds)) {\r\n            return NaN;\r\n        }\r\n\r\n        return (hours % 24) * MILLISECONDS_IN_HOUR +\r\n            minutes * MILLISECONDS_IN_MINUTE +\r\n            seconds * 1000;\r\n    }\r\n\r\n    // Invalid ISO-formatted time\r\n    return null;\r\n}\r\n\r\nfunction parseTimezone(timezoneString: string) {\r\n    let token: RegExpExecArray | string[];\r\n    let absoluteOffset: number;\r\n\r\n    // Z\r\n    token = patterns.timezoneZ.exec(timezoneString);\r\n    if (token) {\r\n        return 0;\r\n    }\r\n\r\n    let hours: number;\r\n\r\n    // ±hh\r\n    token = patterns.timezoneHH.exec(timezoneString);\r\n    if (token) {\r\n        hours = parseInt(token[2], 10);\r\n        absoluteOffset = hours * MILLISECONDS_IN_HOUR;\r\n        return (token[1] === '+') ? -absoluteOffset : absoluteOffset;\r\n    }\r\n\r\n    // ±hh:mm or ±hhmm\r\n    token = patterns.timezoneHHMM.exec(timezoneString);\r\n    if (token) {\r\n        hours = parseInt(token[2], 10);\r\n        const minutes = parseInt(token[3], 10);\r\n\r\n        if (!validateTimezone(minutes)) {\r\n            return NaN;\r\n        }\r\n\r\n        absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\r\n        return (token[1] === '+') ? -absoluteOffset : absoluteOffset;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nfunction dayOfISOWeekYear(isoWeekYear: number, week: number, day?: number) {\r\n    week = week || 0;\r\n    day = day || 0;\r\n    const date = new Date(0);\r\n    date.setUTCFullYear(isoWeekYear, 0, 4);\r\n    const fourthOfJanuaryDay = date.getUTCDay() || 7;\r\n    const diff = week * 7 + day + 1 - fourthOfJanuaryDay;\r\n    date.setUTCDate(date.getUTCDate() + diff);\r\n    return date;\r\n}\r\n\r\n// Validation functions\r\n\r\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\nconst DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\nfunction isLeapYearIndex(year: number) {\r\n    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\r\n}\r\n\r\nfunction validateDate(year: number, month: number, date?: number) {\r\n    if (month < 0 || month > 11) {\r\n        return false;\r\n    }\r\n\r\n    if (date != null) {\r\n        if (date < 1) {\r\n            return false;\r\n        }\r\n\r\n        const isLeapYear = isLeapYearIndex(year);\r\n        if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\r\n            return false;\r\n        }\r\n        if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction validateDayOfYearDate(year: number, dayOfYear: number) {\r\n    if (dayOfYear < 1) {\r\n        return false;\r\n    }\r\n\r\n    const isLeapYear = isLeapYearIndex(year);\r\n    if (isLeapYear && dayOfYear > 366) {\r\n        return false;\r\n    }\r\n    if (!isLeapYear && dayOfYear > 365) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction validateWeekDate(week: number, day?: number) {\r\n    if (week < 0 || week > 52) {\r\n        return false;\r\n    }\r\n\r\n    if (day != null && (day < 0 || day > 6)) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction validateTime(hours: number, minutes?: number, seconds?: number) {\r\n    if (hours != null && (hours < 0 || hours >= 25)) {\r\n        return false;\r\n    }\r\n\r\n    if (minutes != null && (minutes < 0 || minutes >= 60)) {\r\n        return false;\r\n    }\r\n\r\n    if (seconds != null && (seconds < 0 || seconds >= 60)) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction validateTimezone(minutes: number) {\r\n    return !(minutes < 0 || minutes > 59);\r\n}\r\n"]}},"error":null,"hash":"f778c8b8f0636f40f0b47eed073c5e2b","cacheData":{"env":{}}}